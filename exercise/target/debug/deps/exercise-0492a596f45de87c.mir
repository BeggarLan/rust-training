// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at src/main.rs:1:11: 1:11
    let _1: std::string::String;         // in scope 0 at src/main.rs:3:9: 3:12
    let mut _2: &str;                    // in scope 0 at src/main.rs:3:23: 3:41
    let _3: &str;                        // in scope 0 at src/main.rs:3:23: 3:34
    scope 1 {
        debug str => _1;                 // in scope 1 at src/main.rs:3:9: 3:12
    }

    bb0: {
        _3 = const "lanweihua";          // scope 0 at src/main.rs:3:23: 3:34
                                         // mir::Constant
                                         // + span: src/main.rs:3:23: 3:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at src/main.rs:3:23: 3:41
        _1 = <&str as Into<String>>::into(move _2) -> bb1; // scope 0 at src/main.rs:3:23: 3:41
                                         // mir::Constant
                                         // + span: src/main.rs:3:35: 3:39
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at src/main.rs:15:1: 15:2
    }

    bb2: {
        return;                          // scope 0 at src/main.rs:15:2: 15:2
    }
}
